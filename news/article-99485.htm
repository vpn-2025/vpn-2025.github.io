<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpn-2025.github.io/news/article-99485.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>java单例模式的8种写法</title>
        <meta name="description" content="单例模式（Singleton）是一种非常简单且容易理解的设计模式。顾名思义，单例即单一的实例，确切地讲就是指在某个系统中只存在一个实例，同时提供集中、统一的访问接口，以使系统行为保持协调一致  pac" />
        <link rel="icon" href="/assets/website/img/v2rayclashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="2025年免费VPN推荐 费VPN节点订阅中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpn-2025.github.io/news/article-99485.htm" />
    <meta property="og:site_name" content="2025年免费VPN推荐 费VPN节点订阅中文网" />
    <meta property="og:title" content="java单例模式的8种写法" />
    <meta property="og:image" content="https://vpn-2025.github.io/uploads/20240531/6640349e82a4ad58db4739309408522e.webp" />
        <meta property="og:release_date" content="2025-04-19T08:58:20" />
    <meta property="og:updated_time" content="2025-04-19T08:58:20" />
        <meta property="og:description" content="单例模式（Singleton）是一种非常简单且容易理解的设计模式。顾名思义，单例即单一的实例，确切地讲就是指在某个系统中只存在一个实例，同时提供集中、统一的访问接口，以使系统行为保持协调一致  pac" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="java单例模式的8种写法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/v2rayclashnode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/v2rayclashnode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/v2rayclashnode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-MWEWL24KNT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-MWEWL24KNT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top">
        <div class="container d-flex align-items-center justify-content-between">
            <a href="/">
                        <span class="logo">2025年免费VPN推荐</span>
                        </a>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="row">
                        <h1>java单例模式的8种写法</h1>
                    </div>
                </div>
            </div>
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <p><strong>单例模式（Singleton</strong>）是一种非常简单且容易理解的设计模式。顾名思义，单例即单一的实例，确切地讲就是指在某个系统中只存在一个实例，同时提供集中、统一的访问接口，以使系统行为保持协调一致</p> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:24  */ public class Test01 {     private static final Test01  INSTANCE=new Test01();      private  Test01(){      }      public static Test01 getINSTANCE() {         return INSTANCE;     }      public static void main(String[] args) {         for (int i=0;i&lt;1000;i++){             new Thread(()-&gt;{                 System.out.println(Test01.getINSTANCE().hashCode());             }).start();         }     } } </code></pre> <p>私有的构造方法使得Test01完全被封闭起来 实例化工作是自己内部的事务</p> <p>private static final 修饰 保证了 INSTANCE是私有的 ,不可见的不可访问的,static保证了静态性,在类被加载进内存时,就已经初始化 ,final保证INSTANCE是常量,是不能被修改的</p> <p>外部只要调用公共的方法TEST01.getINSTANCE就可以获得唯一的实例对象了&nbsp;</p> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:24  */ public class Test03 {     private static final Test03 INSTANCE;      static {         INSTANCE=new Test03();     }     private Test03(){      }      public static Test03 getINSTANCE() {         return INSTANCE;     }      public static void main(String[] args) {         for (int i=0;i&lt;1000;i++){             new Thread(()-&gt;{                 System.out.println(Test03.getINSTANCE().hashCode());             }).start();         }     } } </code></pre> <p>此处将实例化操作放到静态代码块中</p> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:33  */ public class Test02 {     private static Test02 test02;     private Test02(){};      public static Test02 getInstance(){         if (test02==null){             test02=new Test02();         }          return test02;     }      public static void main(String[] args) {         for (int i=0;i&lt;1000;i++){             new Thread(()-&gt;{                 System.out.println(Test02.getInstance().hashCode());             }).start();         }     }  } </code></pre> <p>恶汉模式如果没人使用,但是却实例化对象 ,这样一块内存区不是白浪费了 这样单杀了懒汉模式的写法</p> <p>只有当某一个线程第一次调用getINSTANCE时才会进行实例化操作 之后再有线程访问直接返回对象</p> <p>这样程序乍看确实没什么问题 但是在多线程环境下 可能会有多个线程进入到了getINSTANCE方法内,这样就会导致原来已经实例化的对象被覆盖掉</p> <p>为了保证线程安全 我们给getINSTANCE方法加上&nbsp;synchronized同步锁 下面看第四种写法</p> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:33  */ public class Test04 {     private static Test04 test02;     private Test04(){};      public static synchronized Test04 getInstance(){         if (test02==null){             test02=new Test04();         }          return test02;     }      public static void main(String[] args) {         for (int i=0;i&lt;1000;i++){             new Thread(()-&gt;{                 System.out.println(Test04.getInstance().hashCode());             }).start();         }     }  } </code></pre> <p>这样确实没有什么问题&nbsp;然而这样的做法是要付出一定代价的，试想，线程还没进入方法内部便不管三七二十一直接加锁排队，会造成线程阻塞，资源与时间被白白浪费。我们只是为了实例化一个单例对象而已，犯不上如此兴师动众，使用synchronized让所有请求排队等候。所以，要保证多线程并发下逻辑的正确性，同步锁一定要加得恰到好处</p> <p>下面看第五种写法 在方法体内部加锁:</p> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:33  */ public class Test05 {     private static Test05 test02;     private Test05(){};      public static  Test05 getInstance(){         if (test02==null){             synchronized (Test05.class){                 test02=new Test05();             }                      }          return test02;     }      public static void main(String[] args) {         for (int i=0;i&lt;1000;i++){             new Thread(()-&gt;{                 System.out.println(Test05.getInstance().hashCode());             }).start();         }     }  } </code></pre> <p>这样在多线程环境也会有一定问题 ,可能会有多个线程同时通过了 tese02==null 的判断进入了方法里,这样也会造成重复的实例化</p> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:33  */ public class Test06 {     private static  volatile  Test06 test02;     private Test06(){};      public static Test06 getInstance(){         if (test02==null){             synchronized (Test06.class){                 if (test02==null){                     test02=new Test06();                 }             }         }          return test02;     }      public static void main(String[] args) {         for (int i=0;i&lt;1000;i++){             new Thread(()-&gt;{                 System.out.println(Test06.getInstance().hashCode());             }).start();         }     }  } </code></pre> <p>我们一共用了2个嵌套的判空逻辑，这就是懒加载模式的“双检锁”：外层放宽入口，保证线程并发的高效性；内层加锁同步，保证实例化的单次运行。如此里应外合，不仅达到了单例模式的效果，还完美地保证了构建过程的运行效率，一举两得。</p> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:51  */ public class Test07 {      private Test07(){};      private static class Test0701{         private static final  Test07 test07=new Test07();     }          public   static  Test07 getInstance(){         return Test0701.test07;     }      public static void main(String[] args) {         for (int i=0;i&lt;1000;i++){             new Thread(()-&gt;{                 System.out.println(Test07.getInstance().hashCode());             }).start();         }     }      } </code></pre> </h1> <pre><code class="language-java">package com.cyc.mystudy.singleton;  /**  * @Author cyc  * @create 2022/7/30 11:57  */ public enum Test08 {      INSTANCE;      public  void m(){         System.out.println("业务代码");     }      public static void main(String[] args) {         Test08.INSTANCE.m();     } } </code></pre> <p>在一般情况下我们使用饿汉模式,恶汉模式不用担心多线程环境会出问题,写法上也比较简单,</p> <p>我们不用为了省一点性能而去给自己造成麻烦</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-99484.htm">Arrays.asList存在的坑</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-90572.htm" title="SpringCloudAlibaba微服务docker容器打包和部署示例实战">SpringCloudAlibaba微服务docker容器打包和部署示例实战</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-9-free-node-subscribe-links.htm" title="2025年免费VPN推荐 | 4月9日20.8M/S|免费Shadowrocket/V2ray/Clash/SSR订阅节点地址">2025年免费VPN推荐 | 4月9日20.8M/S|免费Shadowrocket/V2ray/Clash/SSR订阅节点地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-24-free-v2ray-subscribe.htm" title="2025年免费VPN推荐 | 3月24日19.1M/S|免费SSR/V2ray/Shadowrocket/Clash订阅节点地址">2025年免费VPN推荐 | 3月24日19.1M/S|免费SSR/V2ray/Shadowrocket/Clash订阅节点地址</a></li>
                        <li class="py-2"><a href="/news/article-89064.htm" title="动物疫苗价格表图片高清版下载 动物疫苗价格表图片高清版下载软件">动物疫苗价格表图片高清版下载 动物疫苗价格表图片高清版下载软件</a></li>
                        <li class="py-2"><a href="/news/article-86930.htm" title="猫三联多少天之内要打第二针（猫三联多少天之内要打第二针疫苗）">猫三联多少天之内要打第二针（猫三联多少天之内要打第二针疫苗）</a></li>
                        <li class="py-2"><a href="/news/article-89800.htm" title="养猫要打多少针花多少钱（养猫要打几针）">养猫要打多少针花多少钱（养猫要打几针）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-4-free-high-speed-nodes.htm" title="2025年免费VPN推荐 | 4月4日20.4M/S|免费V2ray/Clash/SSR/Shadowrocket订阅节点地址">2025年免费VPN推荐 | 4月4日20.4M/S|免费V2ray/Clash/SSR/Shadowrocket订阅节点地址</a></li>
                        <li class="py-2"><a href="/news/article-97226.htm" title="手把手带你入门链表的基本操作及其优化">手把手带你入门链表的基本操作及其优化</a></li>
                        <li class="py-2"><a href="/news/article-98029.htm" title="领养宠物中心电话号码（宠物领养中心app）">领养宠物中心电话号码（宠物领养中心app）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-29-free-v2ray.htm" title="2025年免费VPN推荐 | 3月29日20.7M/S|免费V2ray/Clash/SSR/Shadowrocket订阅节点地址">2025年免费VPN推荐 | 3月29日20.7M/S|免费V2ray/Clash/SSR/Shadowrocket订阅节点地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container footer-bottom clearfix">
            <div class="copyright">
                                    <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                2025年免费VPN推荐 费VPN节点订阅中文网 版权所有
                <br />
                Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/v2rayclashnode/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashnode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/v2rayclashnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>